/* https://leetcode.cn/problems/min-cost-climbing-stairs/description/
给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。
你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。
请你计算并返回达到楼梯顶部的最低花费。

示例 1：
输入：cost = [10,15,20]
输出：15
解释：你将从下标为 1 的台阶开始。
- 支付 15 ，向上爬两个台阶，到达楼梯顶部。
总花费为 15 。

示例 2：
输入：cost = [1,100,1,1,1,100,1,1,100,1]
输出：6
解释：你将从下标为 0 的台阶开始。
- 支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。
- 支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。
- 支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。
- 支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。
- 支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。
- 支付 1 ，向上爬一个台阶，到达楼梯顶部。
总花费为 6 。
*/

/* 算法的思路如下：
1.定义状态：首先定义一个动态规划数组dp，其中dp[i]表示到达第i个台阶所需的最小费用。
2.初始化状态：由于可以从第0个或第1个台阶开始，所以不需要任何费用就可以到达这两个台阶，因此dp[0]和dp[1]都初始化为0。
3.状态转移方程：考虑到达第i个台阶的方式，有两种选择：一是从第i-1个台阶上来，二是从第i-2个台阶上来。因此，到达第i个台阶的最小费用可以通过以下方式计算：
    如果从第i-1个台阶上来，那么总费用将是dp[i-1]（到达第i-1个台阶的费用）加上cost[i-1]（从第i-1个台阶上到第i个台阶的费用）。
    如果从第i-2个台阶上来，那么总费用将是dp[i-2]（到达第i-2个台阶的费用）加上cost[i-2]（从第i-2个台阶上到第i个台阶的费用）。

*/
#include <vector>
using namespace std;
class Solution {
public:
    int minCostClimbingStairs(vector<int> &cost) {
        int n = cost.size();
        vector<int> dp(n + 1);   //会初始化为0
        for (int i = 2; i <= n; i++) {
            dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);
        }

        return dp[n];
    }
};